# Generated by Django 3.2.5 on 2021-07-22 08:15

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('city', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('datatime', models.DateTimeField(null=True)),
                ('turn', models.CharField(blank=True, max_length=100)),
                ('matches_h', models.PositiveIntegerField(blank=True, null=True, verbose_name='Match Home')),
                ('matches_a', models.PositiveIntegerField(blank=True, null=True, verbose_name='Match Away')),
                ('set_h', models.PositiveIntegerField(blank=True, null=True)),
                ('set_a', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(blank=True, max_length=100, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('npa', models.CharField(blank=True, max_length=30, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=255, null=True)),
                ('family_name', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('licence', models.CharField(max_length=255, unique=True)),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=20, null=True)),
                ('birthday', models.DateField(blank=True, null=True)),
                ('club', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='competitions.club')),
            ],
        ),
        migrations.CreateModel(
            name='Structure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('reference', models.CharField(blank=True, max_length=255, null=True, unique=True)),
                ('club', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='teams', to='competitions.club')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='competitions.group')),
                ('players', models.ManyToManyField(blank=True, to='competitions.Player')),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_h_1', models.PositiveIntegerField(blank=True, null=True)),
                ('score_a_1', models.PositiveIntegerField(blank=True, null=True)),
                ('score_h_2', models.PositiveIntegerField(blank=True, null=True)),
                ('score_a_2', models.PositiveIntegerField(blank=True, null=True)),
                ('score_h_3', models.PositiveIntegerField(blank=True, null=True)),
                ('score_a_3', models.PositiveIntegerField(blank=True, null=True)),
                ('match_h', models.PositiveIntegerField(blank=True, null=True)),
                ('match_a', models.PositiveIntegerField(blank=True, null=True)),
                ('set_h', models.PositiveIntegerField(blank=True, null=True)),
                ('set_a', models.PositiveIntegerField(blank=True, null=True)),
                ('competition', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='competitions.competition')),
                ('player_a', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player_away', to='competitions.player', verbose_name='Player Away')),
                ('player_a2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='player_away_2', to='competitions.player')),
                ('player_h', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='player_home', to='competitions.player', verbose_name='Player Home')),
                ('player_h2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='player_home_2', to='competitions.player')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='competitions.type')),
            ],
        ),
        migrations.AddField(
            model_name='competition',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='competitions.group'),
        ),
        migrations.AddField(
            model_name='competition',
            name='team_a',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team_away', to='competitions.team', verbose_name='Team Away'),
        ),
        migrations.AddField(
            model_name='competition',
            name='team_h',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='team_home', to='competitions.team', verbose_name='Team Home'),
        ),
        migrations.CreateModel(
            name='ClubResponsable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('club', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='competitions.club')),
                ('contact', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='club',
            name='structures',
            field=models.ManyToManyField(blank=True, to='competitions.Structure'),
        ),
    ]
